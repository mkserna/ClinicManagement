// <auto-generated />
using System;
using Assessment_MarianaPerezSerna.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessment_MarianaPerezSerna.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115183130_SeederDataBase")]
    partial class SeederDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("StatusAppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("status_appointment_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusAppointmentId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 12, 25),
                            DoctorId = 1,
                            PatientId = 1,
                            StatusAppointmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 12, 26),
                            DoctorId = 2,
                            PatientId = 2,
                            StatusAppointmentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2024, 12, 25),
                            DoctorId = 3,
                            PatientId = 3,
                            StatusAppointmentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2024, 12, 27),
                            DoctorId = 4,
                            PatientId = 4,
                            StatusAppointmentId = 3
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2024, 12, 24),
                            DoctorId = 5,
                            PatientId = 3,
                            StatusAppointmentId = 1
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2024, 12, 25),
                            DoctorId = 1,
                            PatientId = 2,
                            StatusAppointmentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2024, 12, 26),
                            DoctorId = 2,
                            PatientId = 3,
                            StatusAppointmentId = 3
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2024, 12, 27),
                            DoctorId = 3,
                            PatientId = 1,
                            StatusAppointmentId = 1
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2024, 12, 28),
                            DoctorId = 4,
                            PatientId = 9,
                            StatusAppointmentId = 2
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2024, 12, 29),
                            DoctorId = 5,
                            PatientId = 5,
                            StatusAppointmentId = 3
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("HourEnd")
                        .HasColumnType("time(6)")
                        .HasColumnName("hour_end");

                    b.Property<TimeOnly>("HourStart")
                        .HasColumnType("time(6)")
                        .HasColumnName("hour_start");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_available");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("availability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 11, 20),
                            DoctorId = 1,
                            HourEnd = new TimeOnly(12, 0, 0),
                            HourStart = new TimeOnly(8, 0, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 11, 20),
                            DoctorId = 2,
                            HourEnd = new TimeOnly(18, 0, 0),
                            HourStart = new TimeOnly(14, 0, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2024, 11, 21),
                            DoctorId = 3,
                            HourEnd = new TimeOnly(12, 0, 0),
                            HourStart = new TimeOnly(8, 0, 0),
                            IsAvailable = false
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2024, 11, 21),
                            DoctorId = 4,
                            HourEnd = new TimeOnly(13, 0, 0),
                            HourStart = new TimeOnly(9, 0, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2024, 11, 22),
                            DoctorId = 5,
                            HourEnd = new TimeOnly(14, 0, 0),
                            HourStart = new TimeOnly(10, 0, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2024, 11, 22),
                            DoctorId = 6,
                            HourEnd = new TimeOnly(19, 0, 0),
                            HourStart = new TimeOnly(15, 0, 0),
                            IsAvailable = false
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2024, 11, 23),
                            DoctorId = 1,
                            HourEnd = new TimeOnly(12, 30, 0),
                            HourStart = new TimeOnly(8, 30, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2024, 11, 23),
                            DoctorId = 2,
                            HourEnd = new TimeOnly(18, 30, 0),
                            HourStart = new TimeOnly(14, 30, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2024, 11, 24),
                            DoctorId = 3,
                            HourEnd = new TimeOnly(11, 0, 0),
                            HourStart = new TimeOnly(7, 0, 0),
                            IsAvailable = true
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2024, 11, 24),
                            DoctorId = 4,
                            HourEnd = new TimeOnly(16, 0, 0),
                            HourStart = new TimeOnly(12, 0, 0),
                            IsAvailable = true
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("specialty_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "marianaperezserna@gmail.com",
                            Lastname = "perez serna",
                            Name = "mariana",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "juangomez@gmail.com",
                            Lastname = "gómez lópez",
                            Name = "juan",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "anaramirez@gmail.com",
                            Lastname = "ramírez torres",
                            Name = "ana",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "luismartinez@gmail.com",
                            Lastname = "martínez rivera",
                            Name = "luis",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 4
                        },
                        new
                        {
                            Id = 5,
                            Email = "carlafernandez@gmail.com",
                            Lastname = "fernández pérez",
                            Name = "carla",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 5
                        },
                        new
                        {
                            Id = 6,
                            Email = "pedrohernandez@gmail.com",
                            Lastname = "hernández núñez",
                            Name = "pedro",
                            Password = "123654789",
                            RoleId = 1,
                            SpecialtyId = 6
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "calle falsa 123, ciudad x",
                            Email = "juanperez@gmail.com",
                            Lastname = "perez",
                            Name = "juan",
                            Password = "741258963",
                            Phone = "1234567890",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "avenida del sol 456, ciudad y",
                            Email = "anagarcia@yahoo.com",
                            Lastname = "garcia",
                            Name = "ana",
                            Password = "741258963",
                            Phone = "0987654321",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "barrio norte 789, ciudad z",
                            Email = "luismartinez@outlook.com",
                            Lastname = "martinez",
                            Name = "luis",
                            Password = "741258963",
                            Phone = "5678901234",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            Address = "calle nueva 101, ciudad w",
                            Email = "mariarodriguez@hotmail.com",
                            Lastname = "rodriguez",
                            Name = "maria",
                            Password = "741258963",
                            Phone = "1234509876",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "plaza central 202, ciudad v",
                            Email = "pedrolopez@correo.com",
                            Lastname = "lopez",
                            Name = "pedro",
                            Password = "741258963",
                            Phone = "1122334455",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "doctor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "patient"
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "neurology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cardiology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "dermatology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "pediatrics"
                        },
                        new
                        {
                            Id = 5,
                            Name = "gynecology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "orthopedics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "psychology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "dentistry"
                        },
                        new
                        {
                            Id = 9,
                            Name = "rheumatology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "oncology"
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.StatusAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("status_appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "booked"
                        },
                        new
                        {
                            Id = 3,
                            Name = "canceled"
                        });
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Appointment", b =>
                {
                    b.HasOne("Assessment_MarianaPerezSerna.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_MarianaPerezSerna.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_MarianaPerezSerna.Models.StatusAppointment", "StatusAppointment")
                        .WithMany()
                        .HasForeignKey("StatusAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("StatusAppointment");
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Availability", b =>
                {
                    b.HasOne("Assessment_MarianaPerezSerna.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Doctor", b =>
                {
                    b.HasOne("Assessment_MarianaPerezSerna.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_MarianaPerezSerna.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Assessment_MarianaPerezSerna.Models.Patient", b =>
                {
                    b.HasOne("Assessment_MarianaPerezSerna.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
